pub_date	title	venue	excerpt	citation	url_slug	paper_url	slides_url
2025-06-23	Real-Time GPU Tree Generation	High Performance Graphics - Symposium Papers	Trees for real-time media are typically created using procedural algorithms and then baked to a polygon format, requiring large amounts of memory. We propose a novel procedural system and model for generating and rendering realistic trees and similar vegetation specifically tailored to run in real-time on GPUs. By using GPU work graphs with mesh nodes, we render gigabytes-worth of tree geometry from kilobytes of generation code every frame exclusively on the GPU. Contrary to prior work, our method combines instant in-engine artist authoring, continuous frame-specific level of detail and tessellation, highly detailed animation, and seasonal details like blossoms, fruits, and snow. Generating the unique tree geometries of our teaser test scene and rendering them to the G-buffer takes 3.13 ms on an AMD Radeon RX 7900 XTX.	Kuth, Bastian; Oberberger, Max; Faber Carsten; Pfeifer, Pirmin; Tabaei, Seyedmasih; Baumeister, Dominik; Meyer, Quirin. (2025). "Real-Time GPU Tree Generation." <i>High-Performance Graphics - Symposium Papers</i>.	Kuth25RTG	../files/Kuth25RTG.pdf
2014-10-16	Survey of Efficient Representations for Independent Unit Vectors	Journal of Computer Graphics Techniques	The bandwidth cost and memory footprint of vector buffers are limiting factors for GPU rendering in many applications. This article surveys time- and space-efficient representations for the important case of non-register, in-core, statistically independent unit vectors, with emphasis on GPU encoding and decoding. These representations are appropriate for unit vectors in a geometry buffer or attribute stream--where no correlation between adjacent vectors is easily available--or for those in a normal map where quality higher than that of DXN is required. We do not address out-of-core and register storage vectors because they favor minimum-space and maximum-speed alternatives, respectively.	Zina H. Cigolle, Sam Donow, Daniel Evangelakos, Michael Mara, Morgan McGuire, and Quirin Meyer. (2014). Survey of Efficient Representations for Independent Unit Vectors, <i>Journal of Computer Graphics Techniques (JCGT)</i>, vol. 3, no. 2, 1-30, 2014	Cigolle14SER	../files/Cigolle14SER.pdf
2010-11-01	Surface Reconstruction Based on Hierarchical Floating Radial Basis Functions	Computer Graphics Forum	In this paper we address the problem of optimal centre placement for scattered data approximation using radial basis functions (RBFs) by introducing the concept of floating centres. Given an initial least-squares solution, we optimize the positions and the weights of the RBF centres by minimizing a non-linear error function. By optimizing the centre positions, we obtain better approximations with a lower number of centres, which improves the numerical stability of the fitting procedure. We combine the non-linear RBF fitting with a hierarchical domain decomposition technique. This provides a powerful tool for surface reconstruction from oriented point samples. By directly incorporating point normal vectors into the optimization process, we avoid the use of off-surface points which results in less computational overhead and reduces undesired surface artefacts. We demonstrate that the proposed surface reconstruction technique is as robust as recent methods, which compute the indicator function of the solid described by the point samples. In contrast to indicator function based methods, our method computes a global distance field that can directly be used for shape registration.  Suessmuth, Jochen; Meyer, Quirin; Greiner, Guenther. (2010), Surface Reconstruction Based on Hierarchical Floating Radial Basis Functions, <i>29-Issue 6</i>	Suessmuth10SRB	../files/B-PrePrint.pdf
2010-06-28	3-SAT on CUDA: Towards a Massively Parallel SAT Solver	2010 International Conference on High Performance Computing & Simulation	This work presents the design and implementation of a massively parallel 3-SAT solver, specifically targeting random problem instances. Our approach is deterministic and features very little communication overhead and basically no load-balancing cost at all. In the context of most current parallel SAT solvers running only on a handful of cores, we implemented our solver on Nvidia's CUDA platform, utilizing more than 200 parallel streaming processors, and employing several millions of threads to work through single problem instances. As most common sequential solver techniques had to be discarded, our approach is additionally supported by a new set of global heuristics, designed specifically to be easily exploited by the underlying thread parallelism.	Meyer, Quirin; Sch√∂nfeld, Fabian; Stamminger, Marc; Wanka, Rolf. (2010). 3-SAT on CUDA: Towards a Massively Parallel SAT Solver, <i>2010 International Conference on High Performance Computing & Simulation</i>	Schoenfeld103SC	../files/Schoenfeld103SC.pdf
2010-06-27	On Floating-Point Normal Vectors	Computer Graphics Forum	In this paper we analyze normal vector representations. We derive the error of the most widely used representation, namely 3D floating-point normal vectors. Based on this analysis, we show that, in theory, the discretization error inherent to single precision floating-point normals can be achieved by 250.2 uniformly distributed normals, addressable by 51 bits. We review common sphere parameterizations and show that octahedron normal vectors perform best: they are fast and stable to compute, have a controllable error, and require only 1 bit more than the theoretical optimal discretization with the same error.	Meyer, Quirin; Suessmuth, Jochen; Sussner, Gerd; Stamminger, Marc; Greiner, Guenther. (2010), On Floating-Point Normal Vectors, <i>29-Issue 4 EGSR10: 21th Eurographics Symposium on Rendering</i>	Meyer10OFP	../files/Meyer10OFN-PrePrint.pdf
2009-02-27	Real-time View-dependent Rendering of Parametric Surfaces	Proceedings of the 2009 symposium on Interactive 3D graphics and games (I3D '09)	We propose a view-dependent adaptive subdivision algorithm for rendering parametric surfaces on parallel hardware. Our framework allows us to bound the screen space error of a piecewise linear approximation. We naturally assign more primitives to curved areas while keeping quads large for flatter parts of the model and avoid cracks resulting from the polygonal approximation of non-uniform patch subdivision. The overall algorithm is simple, fits current GPUs extremely well, and is surprisingly fast while producing little to no artifacts.	Eisenacher, Christian; Meyer, Quirin, and Loop, Charles. Real-time view-dependent rendering of parametric surfaces. <i>Proceedings of the 2009 symposium on Interactive 3D graphics and games (I3D '09)</i>	Eisenacher09RVR	../files/Eisenacher09RVRPreprint.pdf

